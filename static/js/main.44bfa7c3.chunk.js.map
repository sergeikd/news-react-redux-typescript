{"version":3,"sources":["components/Content.tsx","config/appConfig.ts","components/Tab.tsx","components/Select.tsx","actions/selectAction.ts","components/Search.tsx","actions/searchAction.ts","components/Sort.tsx","actions/sortAction.ts","components/TabMenu.tsx","actions/newsAction.ts","App.tsx","serviceWorker.js","reducers/newsReducer.ts","reducers/selectReducer.ts","reducers/searchReducer.ts","reducers/sortReducer.ts","index.js"],"names":["Content","_this","this","props","isLoading","react_default","a","createElement","articles","Object","toConsumableArray","selected","filter","x","source","name","search","title","toLowerCase","includes","sort","b","localeCompare","asc","reverse","className","map","newsItem","index","key","src","urlToImage","alt","description","React","Component","connect","state","news","selection","input","themes","Tab","_ref","tabItem","activeTab","onTabClick","onClick","Select","handleChange","event","target","value","changeSelect","sourceArr","item","unique","Set","unshift","Fragment","onChange","dispatch","select","type","setSelection","Search","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","currentInput","setState","changeSearch","size","setSearch","Sort","handleClick","changeSort","currentTarget","textContent","setSortDirection","TabMenu","Tab_Tab","components_Search","components_Select","components_Sort","newsAreLoading","App","id","fetchData","TabMenu_TabMenu","components_Content","searchWord","url","concat","fetch","then","response","json","data","getNews","Boolean","window","location","hostname","match","initialState","reducers","combineReducers","arguments","length","undefined","action","objectSpread","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4RAqBMA,mLACwB,IAAAC,EAAAC,KACtB,GAAIA,KAAKC,MAAMC,UACX,OAAQC,EAAAC,EAAAC,cAAA,uBAGZ,IAAIC,EAAoBC,OAAAC,EAAA,EAAAD,CAAOP,KAAKC,MAAMK,UAc1C,OAbIN,KAAKC,MAAMQ,WACXH,EAAWA,EAASI,OAAO,SAAAC,GAAC,OAAIA,EAAEC,OAAOC,OAASd,EAAKE,MAAMQ,YAG7DT,KAAKC,MAAMa,SACXR,EAAWA,EAASI,OAAO,SAAAC,GAAC,OAAIA,EAAEI,MAAMC,cAAcC,SAASlB,EAAKE,MAAMa,OAAOE,kBAGrFV,EAAWA,EAASY,KAAK,SAACd,EAAGe,GAAJ,OAAW,GAAIf,EAAEW,OAAOK,cAAcD,EAAEJ,SAE7Df,KAAKC,MAAMoB,MACXf,EAAWA,EAASgB,WAGpBnB,EAAAC,EAAAC,cAAA,MAAIkB,UAAU,aACTjB,EAASkB,IAAI,SAACC,EAAUC,GACrB,OACIvB,EAAAC,EAAAC,cAAA,MAAIsB,IAAKD,EAAOH,UAAU,aACtBpB,EAAAC,EAAAC,cAAA,OAAKuB,IAAKH,EAASI,WAAYC,IAAKL,EAASV,QAC7CZ,EAAAC,EAAAC,cAAA,aAAQoB,EAASV,OACjBZ,EAAAC,EAAAC,cAAA,SAAIoB,EAASM,aACb5B,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,SAAIoB,EAASb,OAAOC,kBA5B7BmB,IAAMC,WAuEbC,cAV0B,SAACC,GACtC,MAAO,CACH7B,SAAU6B,EAAMC,KAAK9B,SACrBJ,UAAWiC,EAAMC,KAAKlC,UACtBO,SAAU0B,EAAME,UAAU5B,SAC1BK,OAAQqB,EAAMrB,OAAOwB,MACrBjB,IAAKc,EAAMjB,KAAKG,MAITa,CAAyBpC,GC1F3ByC,EAAmB,CAAC,SAAU,OAAQ,aAAc,UCOpDC,EAAuB,SAAAC,GAA4D,IAAzDC,EAAyDD,EAAzDC,QAASC,EAAgDF,EAAhDE,UAAWjB,EAAqCe,EAArCf,MAAOkB,EAA8BH,EAA9BG,WAC9D,OACIzC,EAAAC,EAAAC,cAAA,UAAQkB,UAAWoB,IAAcjB,EAAQ,aAAe,MACpDC,IAAKD,EACLmB,QAAS,kBAAMD,EAAWlB,KACzBgB,ICGPI,6MACFC,aAAe,SAACC,GACZ,IAAMvC,EAAmBuC,EAAMC,OAAOC,MACtCnD,EAAKE,MAAMkD,aAA0B,iBAAb1C,EAA8B,GAAKA,4EAI3D,IAAM2C,EAAsBpD,KAAKC,MAAMK,SAASkB,IAAI,SAAC6B,GACjD,OAAQA,EAAKzC,OAAOC,OAElByC,EAAgB/C,OAAAC,EAAA,EAAAD,CAAO,IAAIgD,IAAIH,IAErC,OADAE,EAAOE,QAAQ,gBAEXrD,EAAAC,EAAAC,cAAAF,EAAAC,EAAAqD,SAAA,KACItD,EAAAC,EAAAC,cAAA,OAAKkB,UAAU,aAAf,YACApB,EAAAC,EAAAC,cAAA,UAAQ6C,MAAOlD,KAAKC,MAAMQ,SAAUiD,SAAU1D,KAAK+C,cAC9CO,EAAO9B,IAAI,SAAC6B,EAAM3B,GACf,OACIvB,EAAAC,EAAAC,cAAA,UAAQsB,IAAKD,EAAOwB,MAAOG,GAAOA,cAlBzCrB,IAAMC,WAiDZC,cAjB0B,SAACC,GACtC,MAAO,CACH1B,SAAU0B,EAAME,UAAU5B,SAC1BH,SAAU6B,EAAMC,KAAK9B,WAQkB,SAACqD,GAC5C,MAAO,CACHR,aAAc,SAACS,GAAD,OAAoBD,EC1DA,SAACC,GACvC,MAAO,CACHC,KAAM,gBACND,UDuD2CE,CAAaF,OAIjD1B,CAA6CY,GE9CtDiB,cACF,SAAAA,EAAY9D,GAAqB,IAAAF,EAAA,OAAAQ,OAAAyD,EAAA,EAAAzD,CAAAP,KAAA+D,IAC7BhE,EAAAQ,OAAA0D,EAAA,EAAA1D,CAAAP,KAAAO,OAAA2D,EAAA,EAAA3D,CAAAwD,GAAAI,KAAAnE,KAAMC,KAMV8C,aAAe,SAACC,GACZ,IAAMoB,EAAuBpB,EAAMC,OAAOC,MAC1CnD,EAAKsE,SAAS,CAAE/B,MAAO8B,IACvBrE,EAAKE,MAAMqE,aAAaF,IARxBrE,EAAKoC,MAAQ,CACTG,MAAO,IAHkBvC,wEAc7B,OACII,EAAAC,EAAAC,cAAAF,EAAAC,EAAAqD,SAAA,KACItD,EAAAC,EAAAC,cAAA,OAAKkB,UAAU,aAAf,YACApB,EAAAC,EAAAC,cAAA,SAAOwD,KAAK,OAAOU,KAAM,EAAGrB,MAAOlD,KAAKC,MAAMqC,MAAOoB,SAAU1D,KAAK+C,uBAlB/Df,IAAMC,WA4CZC,cAhB0B,SAACC,GACtC,MAAO,CACHG,MAAOH,EAAMrB,OAAOwB,QAQmB,SAACqB,GAC5C,MAAO,CACHW,aAAc,SAAChC,GAAD,OAAWqB,ECxDG,SAACrB,GACjC,MAAO,CACHuB,KAAM,aACNvB,SDqDkCkC,CAAUlC,OAIrCJ,CAA6C6B,GEhDtDU,6MAMFC,YAAc,SAAC1B,GACXjD,EAAKE,MAAM0E,WAA+C,QAApC3B,EAAM4B,cAAcC,iGAJ1C7E,KAAKC,MAAM0E,YADqB,oCAShC,OACIxE,EAAAC,EAAAC,cAAAF,EAAAC,EAAAqD,SAAA,KACItD,EAAAC,EAAAC,cAAA,OAAKkB,UAAU,aAAf,UACApB,EAAAC,EAAAC,cAAA,QAAMwC,QAAS7C,KAAK0E,aAAc1E,KAAKC,MAAMoB,IAAM,MAAQ,eAdxDW,IAAMC,WAwCVC,cAhB0B,SAACC,GACtC,MAAO,CACHd,IAAKc,EAAMjB,KAAKG,MAQuB,SAACsC,GAC5C,MAAO,CACHgB,WAAY,SAACtD,GAAD,OAASsC,EChDqB,SAACtC,GAC/C,MAAO,CACHwC,KAAM,qBACNxC,OD6C8ByD,CAAiBzD,OAIxCa,CAA6CuC,GE3C/CM,EAA8B,SAAAtC,GAAoD,IAAjDF,EAAiDE,EAAjDF,OAAQI,EAAyCF,EAAzCE,UAAWC,EAA8BH,EAA9BG,WAC7D,OACIzC,EAAAC,EAAAC,cAAA,OAAKkB,UAAU,YACVgB,EAAOf,IAAI,SAACkB,EAAShB,GAClB,OACIvB,EAAAC,EAAAC,cAAC2E,EAAD,CAAKtC,QAASA,EAASC,UAAWA,EAAWjB,MAAOA,EAAOkB,WAAYA,EAAYjB,IAAKD,MAGhGvB,EAAAC,EAAAC,cAAC4E,EAAD,MACA9E,EAAAC,EAAAC,cAAC6E,EAAD,MACA/E,EAAAC,EAAAC,cAAC8E,EAAD,QCdCC,EAAiC,SAAClF,GAC3C,MAAO,CACH2D,KAAM,mBACN3D,cCMFmF,cACJ,SAAAA,EAAYpF,GAAkB,IAAAF,EAAA,OAAAQ,OAAAyD,EAAA,EAAAzD,CAAAP,KAAAqF,IAC5BtF,EAAAQ,OAAA0D,EAAA,EAAA1D,CAAAP,KAAAO,OAAA2D,EAAA,EAAA3D,CAAA8E,GAAAlB,KAAAnE,KAAMC,KAYR2C,WAAa,SAAC0C,GACZvF,EAAKsE,SAAS,CAAE1B,UAAW2C,IAC3BvF,EAAKE,MAAMsF,UAAUxF,EAAKoC,MAAMI,OAAO+C,KAbvCvF,EAAKoC,MAAQ,CACXI,OAAQA,EACRI,UAAW,GAJe5C,mFAU5BC,KAAKC,MAAMsF,UAAUhD,EADW,qCAUhC,OACEpC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAqD,SAAA,KACEtD,EAAAC,EAAAC,cAACmF,EAAD,CAASjD,OAAQvC,KAAKmC,MAAMI,OAAQI,UAAW3C,KAAKmC,MAAMQ,UAAWC,WAAY5C,KAAK4C,aACtFzC,EAAAC,EAAAC,cAACoF,EAAD,cAvBUxD,aAuCHC,cAAQ,KANwB,SAACyB,GAC9C,MAAO,CACL4B,UAAW,SAACG,GAAD,OAAgB/B,EDvBC,SAAC+B,GAC7B,IAAMC,EAAW,GAAAC,OT9BU,0BS8BV,iBAAAA,OAA6BF,EAA7B,YAAAE,OT/BS,oCSgC1B,OAAO,SAACjC,GACJA,EAASyB,GAAe,IAExBS,MAAMF,GACDG,KAAK,SAACC,GAEH,OADApC,EAASyB,GAAe,IACjBW,IAEVD,KAAK,SAACC,GAAD,OAAcA,EAASC,SAC5BF,KAAK,SAACG,GAAD,OAAUtC,EAnBjB,CACHE,KAAM,qBACNzB,KAiB8C6D,EAAK3F,cCYnB4F,CAAQR,OAIjCxD,CAAkCmD,SC7C7Bc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,sECFAC,EAA8B,CAChClG,SAAU,GACVJ,WAAW,GCbTsG,EAAiC,CACnC5C,OAAQ,ICDN4C,EAAgC,CAClClE,MAAO,ICDLkE,EAA+B,CACjCnF,KAAK,GCOHoF,EAAWC,YAAgB,CAC7BtE,KJOsB,WAAkC,IAAjCD,EAAiCwE,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAzBH,EAAcM,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACxD,OAAQC,EAAOjD,MACX,IAAK,mBACD,OAAOtD,OAAAwG,EAAA,EAAAxG,CAAA,GAAK4B,EAAZ,CAAmBjC,UAAW4G,EAAO5G,UAAWI,SAAU,KAC9D,IAAK,qBACD,OAAOC,OAAAwG,EAAA,EAAAxG,CAAA,GAAK4B,EAAZ,CAAmBjC,WAAW,EAAOI,SAAUwG,EAAO1E,OAC1D,QACI,OAAOD,IIbfE,UHF6B,WAAkC,IAAjCF,EAAiCwE,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAzBH,EAAcM,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC/D,OAAQC,EAAOjD,MACX,IAAK,gBACD,OAAOtD,OAAAwG,EAAA,EAAAxG,CAAA,GACA4B,EADP,CAEI1B,SAAUqG,EAAOlD,SAEzB,IAAK,qBACD,OAAOrD,OAAAwG,EAAA,EAAAxG,CAAA,GAAK4B,EAAZ,CAAmB1B,SAAU,KACjC,QACI,OAAO0B,IGPfrB,OFH0B,WAAkC,IAAjCqB,EAAiCwE,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAzBH,EAAcM,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC5D,OAAQC,EAAOjD,MACX,IAAK,aACD,OAAOtD,OAAAwG,EAAA,EAAAxG,CAAA,GAAK4B,EAAZ,CAAmBG,MAAOwE,EAAOxE,QACrC,IAAK,qBACD,OAAO/B,OAAAwG,EAAA,EAAAxG,CAAA,GAAK4B,EAAZ,CAAmBG,MAAO,KAC9B,QACI,OAAOH,IEHfjB,KDJsB,WAAkC,IAAjCiB,EAAiCwE,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAzBH,EAAcM,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACxD,OAAQC,EAAOjD,MACX,IAAK,qBACD,OAAOtD,OAAAwG,EAAA,EAAAxG,CAAA,GACA4B,EADP,CAEId,IAAKyF,EAAOzF,MAEpB,IAAK,qBACD,OAAOd,OAAAwG,EAAA,EAAAxG,CAAA,GAAK4B,EAAZ,CAAmBd,KAAK,IAC5B,QACI,OAAOc,MCJb6E,EAAmBZ,OAAOa,sCAAwCC,IAClEC,EAAQC,YAAYX,EAAUO,EAChCK,YAAgBC,OAGpBC,IAASC,OACLrH,EAAAC,EAAAC,cAACoH,EAAA,EAAD,CAAUN,MAAOA,GACbhH,EAAAC,EAAAC,cAACqH,EAAD,OAEJC,SAASC,eAAe,SLqGtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjC,KAAK,SAAAkC,GACjCA,EAAaC","file":"static/js/main.44bfa7c3.chunk.js","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\n\nexport interface IArticle {\n    urlToImage: string;\n    title: string;\n    description: string;\n    source: {\n        id: string,\n        name: string,\n    };\n}\n\ninterface IContent {\n    isLoading: boolean;\n    articles: IArticle[];\n    selected: string;\n    search: string;\n    asc: boolean;\n}\n\nclass Content extends React.Component<IContent> {\n    render(): React.ReactNode {\n        if (this.props.isLoading) {\n            return (<p>Loading...</p>);\n        }\n\n        let articles: IArticle[] = [...this.props.articles];\n        if (this.props.selected) {\n            articles = articles.filter(x => x.source.name === this.props.selected);\n        }\n\n        if (this.props.search) {\n            articles = articles.filter(x => x.title.toLowerCase().includes(this.props.search.toLowerCase()));\n        }\n\n        articles = articles.sort((a, b) => (\"\"+ a.title).localeCompare(b.title));\n\n        if(!this.props.asc) {\n            articles = articles.reverse();\n        }\n        return (\n            <ul className=\"news-list\">\n                {articles.map((newsItem, index) => {\n                    return (\n                        <li key={index} className=\"news-item\">\n                            <img src={newsItem.urlToImage} alt={newsItem.title}></img>\n                            <label>{newsItem.title}</label>\n                            <p>{newsItem.description}</p>\n                            <p><i>{newsItem.source.name}</i></p>\n                        </li>\n                    );\n                })}\n            </ul>\n        );\n    }\n}\n\nexport interface IState {\n    news: {\n        articles: IArticle[];\n        isLoading: boolean;\n    };\n    selection: {\n        selected: string;\n    };\n    search: {\n        input: string;\n    };\n    sort: {\n        asc: boolean;\n    };\n}\n\ntype MapStateToProps = (state: IState) => {\n    selected: string,\n    search: string,\n    articles: IArticle[],\n    isLoading: boolean,\n    asc: boolean,\n};\n\nconst mapStateToProps: MapStateToProps = (state) => {\n    return {\n        articles: state.news.articles,\n        isLoading: state.news.isLoading,\n        selected: state.selection.selected,\n        search: state.search.input,\n        asc: state.sort.asc,\n    };\n};\n\nexport default connect(mapStateToProps)(Content);","export const apiKey: string = \"d53428ee8f524b5a8eca0496826ec26d\";\r\nexport const baseUrl: string = \"https://newsapi.org/v2/\";\r\nexport const themes: string[] = [\"People\", \"Auto\", \"Technology\", \"Realty\"];","import React from \"react\";\n\ninterface ITab {\n    tabItem: string;\n    activeTab: number;\n    index: number;\n    onTabClick: (id: number) => void;\n}\n\nexport const Tab: React.FC<ITab>  = ({ tabItem, activeTab, index, onTabClick }): JSX.Element => {\n    return (\n        <button className={activeTab === index ? \"tab active\" : \"tab\"}\n            key={index}\n            onClick={() => onTabClick(index)}>\n            {tabItem}\n        </button>\n    );\n};","import React from \"react\";\r\nimport { Dispatch } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { IArticle, IState } from \"./Content\";\r\nimport { setSelection } from \"../actions/selectAction\";\r\n\r\ntype ChangeSelect = (select: string) => {\r\n    type: string;\r\n    select: string;\r\n};\r\n\r\ninterface ISelect {\r\n    articles: IArticle[];\r\n    selected: string;\r\n    changeSelect: ChangeSelect;\r\n}\r\n\r\nclass Select extends React.Component<ISelect> {\r\n    handleChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\r\n        const selected: string = event.target.value;\r\n        this.props.changeSelect(selected === \"Not selected\" ? \"\" : selected);\r\n    }\r\n\r\n    render(): React.ReactNode {\r\n        const sourceArr: string[] = this.props.articles.map((item) => {\r\n            return (item.source.name);\r\n        });\r\n        const unique: string[] = [...new Set(sourceArr)];\r\n        unique.unshift(\"Not selected\");\r\n        return (\r\n            <>\r\n                <div className=\"delimeter\">Source: </div>\r\n                <select value={this.props.selected} onChange={this.handleChange}>\r\n                    {unique.map((item, index) => {\r\n                        return (\r\n                            <option key={index} value={item}>{item}</option>\r\n                        );\r\n                    })}\r\n                </select>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\ntype MapStateToProps = (state: IState) => {\r\n    selected: string,\r\n    articles: IArticle[],\r\n};\r\n\r\nconst mapStateToProps: MapStateToProps = (state) => {\r\n    return {\r\n        selected: state.selection.selected,\r\n        articles: state.news.articles,\r\n    };\r\n};\r\n\r\ntype MapDispatchToProps = (dispatch: Dispatch) => {\r\n    changeSelect: ChangeSelect;\r\n};\r\n\r\nconst mapDispatchToProps: MapDispatchToProps = (dispatch) => {\r\n    return {\r\n        changeSelect: (select: string) => dispatch(setSelection(select))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Select);","import { SelectAction } from \"../reducers/selectReducer\";\r\n\r\ntype SetSelection = (input: string) => SelectAction;\r\n\r\nexport const setSelection: SetSelection = (select) => {\r\n    return {\r\n        type: \"SET_SELECTION\",\r\n        select,\r\n    };\r\n};","import React from \"react\";\r\nimport { Dispatch } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { setSearch } from \"../actions/searchAction\";\r\nimport { IState } from \"./Content\";\r\n\r\ntype ChangeSearch = (search: string) => {\r\n    type: string;\r\n    input: string;\r\n};\r\n\r\ninterface ISearch {\r\n    input: string;\r\n}\r\n\r\ninterface ISearchProps {\r\n    changeSearch: ChangeSearch;\r\n    input: string;\r\n}\r\n\r\nclass Search extends React.Component<ISearchProps, ISearch> {\r\n    constructor(props: ISearchProps) {\r\n        super(props);\r\n        this.state = {\r\n            input: \"\",\r\n        };\r\n    }\r\n\r\n    handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const currentInput: string = event.target.value;\r\n        this.setState({ input: currentInput });\r\n        this.props.changeSearch(currentInput);\r\n    }\r\n\r\n    render(): React.ReactNode {\r\n        return (\r\n            <>\r\n                <div className=\"delimeter\">Search: </div>\r\n                <input type=\"text\" size={5} value={this.props.input} onChange={this.handleChange} />\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\ntype MapStateToProps = (state: IState) => {\r\n    input: string,\r\n};\r\n\r\nconst mapStateToProps: MapStateToProps = (state) => {\r\n    return {\r\n        input: state.search.input,\r\n    };\r\n};\r\n\r\ntype MapDispatchToProps = (dispatch: Dispatch) => {\r\n    changeSearch: ChangeSearch;\r\n};\r\n\r\nconst mapDispatchToProps: MapDispatchToProps = (dispatch) => {\r\n    return {\r\n        changeSearch: (input) => dispatch(setSearch(input))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Search);","import { SearchAction } from \"../reducers/searchReducer\";\r\n\r\ntype SetSearch = (input: string) => SearchAction;\r\n\r\nexport const setSearch: SetSearch = (input) => {\r\n    return {\r\n        type: \"SET_SEARCH\",\r\n        input,\r\n    };\r\n};","import React from \"react\";\r\nimport { Dispatch } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { setSortDirection } from \"../actions/sortAction\";\r\nimport { IState } from \"./Content\";\r\n\r\ntype ChangeSort = (asc: boolean) => {\r\n    type: string;\r\n    asc: boolean;\r\n};\r\n\r\ninterface ISort {\r\n    asc: boolean;\r\n    changeSort: ChangeSort;\r\n}\r\n\r\nclass Sort extends React.Component<ISort> {\r\n    componentDidMount(): void {\r\n        const initialSorting: boolean = true;\r\n        this.props.changeSort(initialSorting);\r\n    }\r\n\r\n    handleClick = (event: React.MouseEvent<HTMLSpanElement>) => {\r\n        this.props.changeSort(event.currentTarget.textContent === \"Z-A\");\r\n    }\r\n\r\n    render(): React.ReactNode {\r\n        return (\r\n            <>\r\n                <div className=\"delimeter\">Sort: </div>\r\n                <span onClick={this.handleClick}>{this.props.asc ? \"A-Z\" : \"Z-A\"}</span>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\ntype MapStateToProps = (state: IState) => {\r\n    asc: boolean,\r\n};\r\n\r\nconst mapStateToProps: MapStateToProps = (state) => {\r\n    return {\r\n        asc: state.sort.asc,\r\n    };\r\n};\r\n\r\ntype MapDispatchToProps = (dispatch: Dispatch) => {\r\n    changeSort: ChangeSort;\r\n};\r\n\r\nconst mapDispatchToProps: MapDispatchToProps = (dispatch) => {\r\n    return {\r\n        changeSort: (asc) => dispatch(setSortDirection(asc))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Sort);","import { SortAction } from \"../reducers/sortReducer\";\r\n\r\ntype SetSortDirection = (asc: boolean) => SortAction;\r\n\r\nexport const setSortDirection: SetSortDirection = (asc) => {\r\n    return {\r\n        type: \"SET_SORT_DIRECTION\",\r\n        asc,\r\n    };\r\n};","import React from \"react\";\n\nimport { Tab } from \"./Tab\";\nimport Select from \"./Select\";\nimport Search from \"./Search\";\nimport Sort from \"./Sort\";\n\ninterface ITabMenu {\n    themes: string[];\n    activeTab: number;\n    onTabClick: (id: number) => void;\n}\n\nexport const TabMenu: React.FC<ITabMenu> = ({ themes, activeTab, onTabClick }): JSX.Element => {\n    return (\n        <div className=\"tab-menu\">\n            {themes.map((tabItem, index) => {\n                return (\n                    <Tab tabItem={tabItem} activeTab={activeTab} index={index} onTabClick={onTabClick} key={index} />\n                );\n            })}\n            <Search />\n            <Select />\n            <Sort />\n        </div>\n    );\n};","import { baseUrl, apiKey} from \"../config/appConfig\";\nimport { Dispatch, AnyAction } from \"redux\";\nimport { IArticle } from \"../components/Content\";\n\ntype NewsAreLoading = (isLoading: boolean) => {\n    type: string;\n    isLoading: boolean;\n};\n\nexport const newsAreLoading: NewsAreLoading = (isLoading) => {\n    return {\n        type: \"NEWS_ARE_LOADING\",\n        isLoading,\n    };\n};\n\ntype NewsFetch = (news: IArticle[]) => {\n    type: string;\n    news: IArticle[];\n};\n\nexport const newsFetchSuccess: NewsFetch  = (news) => {\n    return {\n        type: \"NEWS_FETCH_SUCCESS\",\n        news,\n    };\n};\n\ntype GetNews = (searchWord: string) => (dispatch: Dispatch<AnyAction>) => void;\n\nexport const getNews: GetNews = (searchWord) => {\n    const url: string = `${baseUrl}everything?q=${searchWord}&apiKey=${apiKey}`;\n    return (dispatch) => {\n        dispatch(newsAreLoading(true));\n\n        fetch(url)\n            .then((response) => {\n                dispatch(newsAreLoading(false));\n                return response;\n            })\n            .then((response) => response.json())\n            .then((data) => dispatch(newsFetchSuccess(data.articles)))\n    };\n};","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport \"./App.css\";\nimport Content from \"./components/Content\";\nimport { themes } from \"./config/appConfig\";\nimport { TabMenu } from \"./components/TabMenu\";\nimport { getNews } from \"./actions/newsAction\";\n\ninterface IAppState {\n  themes: string[];\n  activeTab: number;\n}\n\ninterface IAppProps {\n  fetchData: (searchWord: string) => void;\n}\n\nclass App extends Component<IAppProps, IAppState> {\n  constructor(props: IAppProps) {\n    super(props);\n    this.state = {\n      themes: themes,\n      activeTab: 0,\n    };\n  }\n\n  componentDidMount(): void {\n    const onLoadActiveTab: number = 0;\n    this.props.fetchData(themes[onLoadActiveTab]);\n  }\n\n  onTabClick = (id: number) => {\n    this.setState({ activeTab: id });\n    this.props.fetchData(this.state.themes[id]);\n  }\n\n  render(): React.ReactNode {\n    return (\n      <>\n        <TabMenu themes={this.state.themes} activeTab={this.state.activeTab} onTabClick={this.onTabClick} />\n        <Content />\n      </>\n    );\n  }\n}\n\ntype MapDispatchToProps =  (dispatch: (dispatch: (dispatch: Dispatch) => void) => void) => {\n  fetchData: (searchWord: string) => void;\n};\n\nconst mapDispatchToProps: MapDispatchToProps = (dispatch) => {\n  return {\n    fetchData: (searchWord) => dispatch(getNews(searchWord))\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export type NewsAction = {\n    type: string;\n    news: [];\n    isLoading: boolean;\n};\n\ntype News = (state: IInitialState, action: NewsAction) => {\n    articles: [];\n    isLoading: boolean;\n};\n\ninterface IInitialState {\n    articles: [];\n    isLoading: boolean;\n}\n\nconst initialState: IInitialState = {\n    articles: [],\n    isLoading: true,\n};\n\nexport const news: News = (state = initialState, action) => {\n    switch (action.type) {\n        case \"NEWS_ARE_LOADING\":\n            return { ...state, isLoading: action.isLoading, articles: [] };\n        case \"NEWS_FETCH_SUCCESS\":\n            return { ...state, isLoading: false, articles: action.news };\n        default:\n            return state;\n    }\n};","export type SelectAction = {\r\n    type: string;\r\n    select: string;\r\n};\r\n\r\nconst initialState: {select: string} = {\r\n    select: \"\",\r\n};\r\n\r\ntype Select = (state: {select: string}, action: SelectAction) => {\r\n    select: string,\r\n};\r\n\r\nexport const selection: Select = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case \"SET_SELECTION\":\r\n            return {\r\n                ...state,\r\n                selected: action.select,\r\n            };\r\n        case \"NEWS_FETCH_SUCCESS\":\r\n            return { ...state, selected: \"\" };\r\n        default:\r\n            return state;\r\n    }\r\n};","export type SearchAction = {\r\n    type: string;\r\n    input: string;\r\n};\r\n\r\nconst initialState: {input: string} = {\r\n    input: \"\",\r\n};\r\n\r\ntype Search = (state: {input: string}, action: SearchAction) => {\r\n    input: string,\r\n};\r\n\r\nexport const search: Search = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case \"SET_SEARCH\":\r\n            return { ...state, input: action.input };\r\n        case \"NEWS_FETCH_SUCCESS\":\r\n            return { ...state, input: \"\" };\r\n        default:\r\n            return state;\r\n    }\r\n};","export type SortAction = {\r\n    type: string;\r\n    asc: boolean;\r\n};\r\n\r\nconst initialState: {asc: boolean} = {\r\n    asc: true,\r\n};\r\n\r\ntype Sort = (state: {asc: boolean}, action: SortAction) => {\r\n    asc: boolean,\r\n};\r\n\r\nexport const sort: Sort = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case \"SET_SORT_DIRECTION\":\r\n            return {\r\n                ...state,\r\n                asc: action.asc,\r\n            };\r\n        case \"NEWS_FETCH_SUCCESS\":\r\n            return { ...state, asc: true };\r\n        default:\r\n            return state;\r\n    }\r\n};","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { combineReducers, createStore, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { news } from \"./reducers/newsReducer\";\nimport { selection } from \"./reducers/selectReducer\";\nimport { search } from \"./reducers/searchReducer\";\nimport { sort } from \"./reducers/sortReducer\";\n\nconst reducers = combineReducers({\n    news,\n    selection,\n    search,\n    sort,\n});\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(reducers, composeEnhancers(\n    applyMiddleware(thunk)\n  ));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}